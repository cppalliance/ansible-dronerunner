---
- name: Check if brew is installed
  ansible.builtin.shell: |
    export PATH=/usr/local/bin:/opt/homebrew/bin:$PATH
    command -v brew
  args:
    executable: /bin/bash
  register: does_brew_exist
  ignore_errors: true
  changed_when: false

- name: Install brew
  ansible.builtin.command: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
  changed_when: true
  when: does_brew_exist.rc

- name: Set hostname
  ansible.builtin.shell: |
    scutil --set HostName {{ inventory_hostname_short }}
  changed_when: false

# ansible.builtin.user does not have fullName? use shell.
- name: Create drone user
  ansible.builtin.shell: |
    set -e
    sysadminctl -addUser {{ dronerunner_user }} -fullName {{ dronerunner_user_fullname }} -shell /bin/bash -password {{ dronerunner_password }} -home /Users/{{ dronerunner_user }}
    mkdir -p /Users/{{ dronerunner_user }}
    chown {{ dronerunner_user }}:staff /Users/{{ dronerunner_user }}
  args:
    creates: /Users/{{ dronerunner_user }}

- name: Create backup admin account
  ansible.builtin.shell: |
    set -e
    set -o pipefail;
    sysadminctl -addUser cppal -fullName cppal -shell /bin/bash -password {{ dronerunner_password }} -home /Users/cppal
    mkdir -p /Users/cppal
    chown cppal:staff /Users/cppal
    dscl . -append /Groups/admin GroupMembership cppal
    user=cppal
    group=staff
    sshdir=/Users/cppal/.ssh
    pubkey1="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCH0oawPzIylSjdu/fpyDD2i2stkqe52bFmLT8+MeiTAp5WI8BwlbeeiiZkneEHhLW7bGMKZ50rQONjiudWCFibb4zM2pUQTFP91BuzUG7MjFf179UlvRMUiNSYkKSSB4q0QZ8+2Vjj5lXzYxM5FjZ9FdA1ioI5l8TK8rLlf/F1TKKDfjA/YMk7769BVYndDilSidaDEvRVxQM8Z5RBUnSnDFQwEaVOuVaHIki0ZPVecwyE96e2HaFDRjNlMUZbSgHrdwkjbIugaUfiWFANBA5eIOka19CSLV5aY1tNeawoUvIBsRXjUleFJE+EIL0iGcuTcLXvAqh5UwFdMkkwUfhH drone-runner"
    if [ ! -f /etc/sudoers.d/$user ]; then
        sudo echo "$user ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/$user
    fi
    mkdir -p $sshdir
    echo "$pubkey1" > $sshdir/authorized_keys
    chmod -R 700 $sshdir
    chown -R $user:$group $sshdir
  args:
    creates: /Users/cppal
    executable: /bin/bash

# why is this here? There was a reason. node_exporter does write logs to this dir
- name: Change ownership of a directory  # noqa risky-file-permissions
  ansible.builtin.file:
    path: /usr/local/var/log
    state: directory
    owner: administrator
    group: admin

- name: Install updates
  ansible.builtin.shell: |
    set -e
    mkdir -p /Users/{{ dronerunner_user }}/.ansible
    touch /Users/{{ dronerunner_user }}/.ansible/installed_initial_mac_software_updates
    # softwareupdate -i -a --restart
    softwareupdate -i -a
  args:
    creates: /Users/drone/.ansible/installed_initial_mac_software_updates
  notify: reboot mac

- name: Check for dronerunner
  ansible.builtin.stat:
    path: /usr/local/bin/drone-runner-exec
  register: drone_exec

# Requires gnu tar
# - name: Download and unarchive dronerunner
#   ansible.builtin.unarchive:
#     src: https://github.com/drone-runners/drone-runner-exec/releases/latest/download/drone_runner_exec_darwin_amd64.tar.gz
#     dest: /usr/local/bin
#     remote_src: true

- name: Download dronerunner
  ansible.builtin.get_url:
    url: https://github.com/drone-runners/drone-runner-exec/releases/latest/download/drone_runner_exec_darwin_{{ ansible_architecture }}.tar.gz
    dest: /tmp
    mode: '0660'
  when:
    - not drone_exec.stat.exists

- name: Extract archive  # noqa command-instead-of-module
  ansible.builtin.shell: |
    tar -xvf /tmp/drone_runner_exec_darwin_{{ ansible_architecture }}.tar.gz
    mv drone-runner-exec /usr/local/bin/drone-runner-exec
  changed_when: true
  when:
    - not drone_exec.stat.exists

- name: Create directory for drone
  ansible.builtin.file:
    path: /Users/{{ dronerunner_user }}/.drone-runner-exec
    owner: "{{ dronerunner_user }}"
    group: staff
    mode: "0755"
    state: directory

- name: Install dronerunner config
  ansible.builtin.template:
    src: config_mac_agent
    dest: /Users/{{ dronerunner_user }}/.drone-runner-exec/config
    owner: "{{ dronerunner_user }}"
    group: staff
    mode: "0644"
    force: false

- name: Install launchctl service
  ansible.builtin.template:
    src: drone-runner-exec.plist
    dest: /Library/LaunchDaemons/drone-runner-exec.plist
    owner: root
    group: wheel
    mode: "0644"
    force: false

- name: Start drone runner
  ansible.builtin.shell: |
    launchctl load /Library/LaunchDaemons/drone-runner-exec.plist
  failed_when: false
  changed_when: true  # uncertain

# Mac OSX has a memory leak in ARD. Reboot the servers periodically:

# Once per month strategy. Deprecated.
#
# - name: cron - determine number of server
#   set_fact:
#     drone_number_of_server: "{{ inventory_hostname_short | regex_search('(\\d+)$') }}"
#
# - name: cron - determine end day
#   set_fact:
#     drone_cron_end_day: "{{ 7 * (drone_number_of_server|int % 4 + 1) }}"
#
# - name: cron - determine start day
#   set_fact:
#     drone_cron_start_day: "{{ drone_cron_end_day|int - 6 }}"
#
# - name: Create cron job to reboot server once a month
#   ansible.builtin.cron:
#     name: "reboot job"
#     minute: "0"
#     hour: "2"
#     day: "{{ drone_cron_start_day }}-{{ drone_cron_end_day }}"
#     job: "[ `date +\\%a` = 'Sun' ] && /sbin/reboot"

# Twice per month strategy:

- name: Cron - determine number of server
  ansible.builtin.set_fact:
    drone_number_of_server: "{{ inventory_hostname_short | regex_search('(\\d+)$') }}"

- name: Cron job to reboot server during first week
  ansible.builtin.cron:
    name: reboot week 1
    minute: "0"
    hour: "2"
    day: 1-7
    job: "[ `date +\\%a` = 'Sun' ] && /sbin/reboot"
  when:
    - drone_number_of_server|int % 2 == 1

- name: Cron job to reboot server during second week
  ansible.builtin.cron:
    name: reboot week 2
    minute: "0"
    hour: "2"
    day: 8-14
    job: "[ `date +\\%a` = 'Sun' ] && /sbin/reboot"
  when:
    - drone_number_of_server|int % 2 == 0

- name: Cron job to reboot server during third week
  ansible.builtin.cron:
    name: reboot week 3
    minute: "0"
    hour: "2"
    day: 15-21
    job: "[ `date +\\%a` = 'Sun' ] && /sbin/reboot"
  when:
    - drone_number_of_server|int % 2 == 1

- name: Cron job to reboot server during fourth week
  ansible.builtin.cron:
    name: reboot week 4
    minute: "0"
    hour: "2"
    day: 22-28
    job: "[ `date +\\%a` = 'Sun' ] && /sbin/reboot"
  when:
    - drone_number_of_server|int % 2 == 0
